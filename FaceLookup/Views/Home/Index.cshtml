@{
    ViewData["Title"] = "Home Page";
}

<div class="upload" id="upload" ondrop="dropHandler(event);" ondragover="dragOverHandler(event);" ondragleave="dragLeaveHandler(event)">
    <img src="images/upload.svg" alt="" class="upload__icon">
    <div class="upload__text">Upload your image here or</div>
    <button id="upload__btn" class="upload__btn btn">Browse</button>
</div>
<input type="file" style="display:none" id="upload-input" name="upload" accept="image/png, image/jpeg">
<div id="main__body" class="main__body hide">
    <div class="left">
        <div class="hero">
            <div class="hero__pic">
                <img id="hero__pic" src="images/test.jpg" alt="">
            </div>
        </div>
        <div class="controls">
            <div class="controls__inner">
                <button id="search__btn" class="btn">Search</button>
                <button id="cancel__btn" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
    <div id="right" class="right hide">
        <div class="results">
            <div id="result_text" class="results__text"></div>
            <div id="results__body" class="results__body">

            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>
        var image;

        var uploadBtnElm = document.getElementById('upload__btn');
        var uploadElm = document.getElementById('upload');
        var searchBtnElm = document.getElementById('search__btn');
        var cancelBtnElm = document.getElementById('cancel__btn');
        var heroPicImgElm = document.getElementById('hero__pic');
        var uploadInputElm = document.getElementById('upload-input');
        var resultTextElm = document.getElementById('result_text');
        var resultsBodyElm = document.getElementById('results__body');
        var mainBodyElm = document.getElementById('main__body');
        var rightElm = document.getElementById('right');

        function dropHandler(ev) {
            // Prevent default behavior (Prevent file from being opened)
            ev.preventDefault();

            if (ev.dataTransfer.items && ev.dataTransfer.items[0].kind === 'file') {
                const file = ev.dataTransfer.items[0].getAsFile();
                if (file.type.startsWith('image')) {
                    const reader = new FileReader();
                    reader.readAsDataURL(file);
                    reader.onload = function () {
                        image = new Image();

                        image.src = reader.result;

                        image.onload = () => {

                            document.getElementById("main__body").classList.remove("hide");
                            uploadElm.classList.add("hide");

                            document.getElementById("hero__pic").src = image.src;
                        }
                    }
                }

            }
        }


        async function startSearch() {
            rightElm.classList.remove('hide');
            resultTextElm.innerHTML = 'searching..';
            const imageData = image.src;
            var strImage = imageData.replace(/^data:image\/[a-z]+;base64,/, "");

            const requestData = {
                "imageData": strImage,
                "imageBounds": {
                    "left": 0,
                    "top": 0,
                    "width": image.width,
                    "height": image.height
                }
            };

            try {
                let response = await fetch('/api/facelookup/find', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    mode: 'cors',
                    cache: 'no-cache',
                    body: JSON.stringify(requestData),
                    signal: AbortSignal.timeout(10000)
                });

                if (response.ok) {
                    var result = await response.json();
                    displayResult(result);
                }

            } catch (err) {

                if (err.name === 'TimeoutError' || err.name === 'AbortError') {
                    resultTextElm.innerHTML = 'Timeout error';
                } else {
                    resultTextElm.innerHTML = `ERROR: ${err}` + err.name;
                }
                
            }
            
        }

        function displayResult(response) {
            if (response.status !== 0)
            {
                resultTextElm.innerHTML = response.statusDescription;
                resultsBodyElm.innerHTML = '';
                return;
            }

            resultTextElm.innerHTML = `${response.faces.length} match(es) found`;
            var facesHtml = response.faces.reduce((acc, face) => 
            {
                const probability = (1 - face.distance) * 100;
                return `<div class="results__card">
                            <div class="card__pic">
                                <img src="api/facelookup/get_image?id=${face.imageSource}" , alt="">
                            </div>
                            <div class="card__desc">
                                <div class="card__probability">
                                    <span class="label">Probability:</span>
                                    <span class="value">${probability.toFixed(2)}%</span>
                                </div>
                                <div class="card__name">
                                    <span class="label">Name:</span>
                                    <span class="value">${face.name}</span>
                                </div>
                            </div>
                        </div>
                        ${acc}
                        `;
            }, '');
            resultsBodyElm.innerHTML = facesHtml;

        }

        function dragOverHandler(ev) {
            ev.preventDefault();
            uploadElm.classList.add('active');
        }

        function dragLeaveHandler(ev) {
            ev.preventDefault();
            uploadElm.classList.remove('active');
        }


        function init() {

            uploadBtnElm.addEventListener('click', () => {
                uploadInputElm.click();                
            });

            cancelBtnElm.addEventListener('click', () => {
                mainBodyElm.classList.add('hide');
                uploadElm.classList.remove('hide');
                rightElm.classList.add('hide');
                uploadElm.classList.remove('active');
                resultsBodyElm.innerHTML = '';
            });

            searchBtnElm.addEventListener('click', () => {
                startSearch();
            });


            // correct
            uploadInputElm.addEventListener('change', function (e) {
                var reader = new FileReader();
                reader.onload = (event) => {
                    image = new Image();
                    image.onload = function () {
                        
                        uploadElm.classList.add("hide");
                        mainBodyElm.classList.remove("hide")

                        heroPicImgElm.src = image.src;
                    }
                    image.src = event.target.result;

                }
                reader.readAsDataURL(e.target.files[0]);
            });

        }

        init();
    </script>
}

